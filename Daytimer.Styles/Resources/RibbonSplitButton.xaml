<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:Ribbon="clr-namespace:Microsoft.Windows.Controls.Ribbon;assembly=RibbonControlsLibrary">
	<Style TargetType="Ribbon:RibbonSplitButton">
		<!--<Setter Property="ContextMenu">
			<Setter.Value>
				<ContextMenu Height="0" Width="0" />
			</Setter.Value>
		</Setter>-->
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Ribbon:RibbonSplitButton}">
					<Grid x:Name="MainGrid" SnapsToDevicePixels="True">
						<Border x:Name="OuterBorder" Background="{TemplateBinding Background}">
							<StackPanel x:Name="StackPanel" Orientation="Horizontal">
								<Ribbon:RibbonButton x:Name="PART_HeaderButton"
										BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent"
										ToolTipService.BetweenShowDelay="0" CanAddToQuickAccessToolBarDirectly="True"
										CommandTarget="{TemplateBinding CommandTarget}"
										CommandParameter="{TemplateBinding CommandParameter}"
										Command="{TemplateBinding Command}" Focusable="False"
										HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
										ToolTipService.InitialShowDelay="900" KeyTip="{TemplateBinding HeaderKeyTip}"
										Label="{TemplateBinding Label}"
										LargeImageSource="{TemplateBinding LargeImageSource}"
										MouseOverBackground="{TemplateBinding MouseOverBackground}"
										MouseOverBorderBrush="{TemplateBinding MouseOverBorderBrush}"
										PressedBorderBrush="{TemplateBinding PressedBorderBrush}"
										Padding="{TemplateBinding Padding}"
										PressedBackground="{TemplateBinding PressedBackground}"
										QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
										Style="{x:Null}" ToolTipService.ShowDuration="20000"
										SmallImageSource="{TemplateBinding SmallImageSource}"
										ToolTipDescription="{TemplateBinding ToolTipDescription}"
										ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
										ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
										ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
										ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
										ToolTipTitle="{TemplateBinding ToolTipTitle}"
										VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
									<Ribbon:RibbonButton.Resources>
										<Thickness
												x:Key="{ComponentResourceKey ResourceId=LargeImageMargin, TypeInTargetAssembly={x:Type Ribbon:Ribbon}}">1,1,1,0</Thickness>
									</Ribbon:RibbonButton.Resources>
									<Ribbon:RibbonButton.ControlSizeDefinition>
										<Ribbon:RibbonControlSizeDefinition IsLabelVisible="False" ImageSize="Large" />
									</Ribbon:RibbonButton.ControlSizeDefinition>
									<Ribbon:RibbonButton.QuickAccessToolBarControlSizeDefinition>
										<Ribbon:RibbonControlSizeDefinition IsLabelVisible="False" ImageSize="Small" />
									</Ribbon:RibbonButton.QuickAccessToolBarControlSizeDefinition>
									<Ribbon:RibbonButton.Template>
										<ControlTemplate TargetType="{x:Type Ribbon:RibbonButton}">
											<Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}"
													BorderThickness="{TemplateBinding BorderThickness}"
													Background="{TemplateBinding Background}" SnapsToDevicePixels="True"
													Padding="{TemplateBinding Padding}">
												<StackPanel x:Name="StackPanel" IsHitTestVisible="False">
													<Image x:Name="PART_Image"
															RenderOptions.BitmapScalingMode="NearestNeighbor"
															HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
															Height="32" Margin="0,2"
															Source="{TemplateBinding LargeImageSource}"
															VerticalAlignment="Center" Width="32" />
													<Ribbon:RibbonTwoLineText x:Name="TwoLineText"
															HorizontalAlignment="Center"
															LineStackingStrategy="BlockLineHeight" LineHeight="13"
															Margin="1,3,1,0" TextAlignment="Center"
															Text="{TemplateBinding Label}" VerticalAlignment="Top" />
												</StackPanel>
											</Border>
											<ControlTemplate.Triggers>
												<DataTrigger
														Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}"
														Value="Large">
													<Setter Property="MinWidth" Value="42" />
													<Setter Property="Height" Value="69" />
													<Setter Property="MinHeight" TargetName="TwoLineText" Value="26" />
													<Setter Property="Ribbon:RibbonTwoLineText.HasTwoLines"
															TargetName="TwoLineText" Value="True" />
												</DataTrigger>
												<DataTrigger
														Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}"
														Value="Small">
													<Setter Property="Height" Value="22" />
													<Setter Property="Margin" TargetName="PART_Image" Value="1,0" />
													<Setter Property="Source" TargetName="PART_Image"
															Value="{Binding SmallImageSource, RelativeSource={RelativeSource TemplatedParent}}" />
													<Setter Property="Width" TargetName="PART_Image" Value="16" />
													<Setter Property="Height" TargetName="PART_Image" Value="16" />
													<Setter Property="HorizontalAlignment" TargetName="TwoLineText"
															Value="Left" />
													<Setter Property="VerticalAlignment" TargetName="TwoLineText"
															Value="Center" />
													<Setter Property="VerticalAlignment" TargetName="PART_Image"
															Value="Center" />
													<Setter Property="Margin" TargetName="TwoLineText" Value="1" />
													<Setter Property="Orientation" TargetName="StackPanel"
															Value="Horizontal" />
												</DataTrigger>
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition
																Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}"
																Value="Small" />
														<Condition
																Binding="{Binding IsInQuickAccessToolBar, RelativeSource={RelativeSource Self}}"
																Value="True" />
													</MultiDataTrigger.Conditions>
													<Setter Property="Height" Value="Auto" />
												</MultiDataTrigger>
												<DataTrigger
														Binding="{Binding ControlSizeDefinition.IsLabelVisible, RelativeSource={RelativeSource Self}}"
														Value="False">
													<Setter Property="Visibility" TargetName="TwoLineText"
															Value="Collapsed" />
												</DataTrigger>
												<DataTrigger
														Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}"
														Value="Collapsed">
													<Setter Property="Visibility" TargetName="PART_Image"
															Value="Collapsed" />
												</DataTrigger>
												<Trigger Property="IsMouseOver" Value="True">
													<Setter Property="Background" TargetName="OuterBorder"
															Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}" />
													<Setter Property="BorderBrush" TargetName="OuterBorder"
															Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
												</Trigger>
												<Trigger Property="IsKeyboardFocused" Value="True">
													<Setter Property="Background" TargetName="OuterBorder"
															Value="{Binding FocusedBackground, RelativeSource={RelativeSource TemplatedParent}}" />
													<Setter Property="BorderBrush" TargetName="OuterBorder"
															Value="{Binding FocusedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
												</Trigger>
												<Trigger Property="IsPressed" Value="True">
													<Setter Property="Background" TargetName="OuterBorder"
															Value="{Binding PressedBackground, RelativeSource={RelativeSource TemplatedParent}}" />
													<Setter Property="BorderBrush" TargetName="OuterBorder"
															Value="{Binding PressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
												</Trigger>
												<Trigger Property="IsInControlGroup" Value="True">
													<Setter Property="BorderBrush" TargetName="OuterBorder"
															Value="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
													<Setter Property="BorderThickness" TargetName="OuterBorder"
															Value="0,0,1,0" />
												</Trigger>
												<Trigger Property="IsEnabled" Value="False">
													<Setter Property="Opacity" TargetName="PART_Image" Value="0.5" />
													<Setter Property="TextElement.Foreground" TargetName="OuterBorder"
															Value="#FF9E9E9E" />
												</Trigger>
												<DataTrigger Binding="{Binding HighContrast}" Value="True">
													<Setter Property="TextElement.Foreground" TargetName="OuterBorder"
															Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
													<Setter Property="Background" TargetName="OuterBorder"
															Value="Transparent" />
													<Setter Property="BorderBrush" TargetName="OuterBorder"
															Value="Transparent" />
												</DataTrigger>
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition
																Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}"
																Value="True" />
														<Condition Binding="{Binding HighContrast}" Value="True" />
													</MultiDataTrigger.Conditions>
													<Setter Property="BorderBrush" TargetName="OuterBorder"
															Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
												</MultiDataTrigger>
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition
																Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}"
																Value="True" />
														<Condition
																Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
																Value="False" />
														<Condition Binding="{Binding HighContrast}" Value="True" />
													</MultiDataTrigger.Conditions>
													<Setter Property="BorderBrush" TargetName="OuterBorder"
															Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
												</MultiDataTrigger>
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition
																Binding="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
																Value="True" />
														<Condition
																Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
																Value="False" />
														<Condition Binding="{Binding HighContrast}" Value="True" />
													</MultiDataTrigger.Conditions>
													<Setter Property="BorderBrush" TargetName="OuterBorder"
															Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
												</MultiDataTrigger>
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition
																Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
																Value="True" />
														<Condition Binding="{Binding HighContrast}" Value="True" />
													</MultiDataTrigger.Conditions>
													<Setter Property="Background" TargetName="OuterBorder"
															Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
													<Setter Property="BorderBrush" TargetName="OuterBorder"
															Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
													<Setter Property="TextElement.Foreground" TargetName="OuterBorder"
															Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
												</MultiDataTrigger>
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition
																Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource Self}}"
																Value="True" />
														<Condition Binding="{Binding HighContrast}" Value="True" />
													</MultiDataTrigger.Conditions>
													<Setter Property="Background" TargetName="OuterBorder"
															Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
													<Setter Property="BorderBrush" TargetName="OuterBorder"
															Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
													<Setter Property="TextElement.Foreground" TargetName="OuterBorder"
															Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
												</MultiDataTrigger>
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition
																Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
																Value="True" />
														<Condition Binding="{Binding HighContrast}" Value="True" />
													</MultiDataTrigger.Conditions>
													<Setter Property="Background" TargetName="OuterBorder"
															Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
													<Setter Property="BorderBrush" TargetName="OuterBorder"
															Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
													<Setter Property="TextElement.Foreground" TargetName="OuterBorder"
															Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
												</MultiDataTrigger>
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition
																Binding="{Binding IsInControlGroup, RelativeSource={RelativeSource Self}}"
																Value="True" />
														<Condition Binding="{Binding HighContrast}" Value="True" />
													</MultiDataTrigger.Conditions>
													<Setter Property="BorderBrush" TargetName="OuterBorder"
															Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
												</MultiDataTrigger>
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition
																Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
																Value="False" />
														<Condition Binding="{Binding HighContrast}" Value="True" />
													</MultiDataTrigger.Conditions>
													<Setter Property="TextElement.Foreground" TargetName="OuterBorder"
															Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
												</MultiDataTrigger>
											</ControlTemplate.Triggers>
										</ControlTemplate>
									</Ribbon:RibbonButton.Template>
								</Ribbon:RibbonButton>
								<Grid>
									<Border x:Name="UnderlayBorder"
											Background="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}"
											Opacity="0.5" Visibility="Collapsed" />
									<Ribbon:RibbonToggleButton x:Name="PART_ToggleButton"
											BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent"
											ToolTipService.BetweenShowDelay="0"
											CheckedBackground="{TemplateBinding CheckedBackground}" ClickMode="Press"
											CheckedBorderBrush="{TemplateBinding CheckedBorderBrush}"
											FocusedBackground="{TemplateBinding FocusedBackground}"
											FocusedBorderBrush="{TemplateBinding FocusedBorderBrush}"
											FocusVisualStyle="{x:Null}"
											HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
											ToolTipService.InitialShowDelay="900"
											IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
											Label="{TemplateBinding Label}"
											MouseOverBackground="{TemplateBinding MouseOverBackground}"
											MouseOverBorderBrush="{TemplateBinding MouseOverBorderBrush}"
											PressedBorderBrush="{TemplateBinding PressedBorderBrush}"
											Padding="{TemplateBinding Padding}"
											PressedBackground="{TemplateBinding PressedBackground}"
											Ribbon:RibbonTwoLineText.PathData="M0,0L2.5,3 5,0z" Style="{x:Null}"
											ToolTipService.ShowDuration="20000"
											ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
											ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
											ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
											ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
											ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
											ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
											VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
										<Ribbon:RibbonToggleButton.ControlSizeDefinition>
											<Ribbon:RibbonControlSizeDefinition IsLabelVisible="False"
													ImageSize="Collapsed" />
										</Ribbon:RibbonToggleButton.ControlSizeDefinition>
										<Ribbon:RibbonToggleButton.Template>
											<ControlTemplate TargetType="{x:Type Ribbon:RibbonToggleButton}">
												<Grid x:Name="MainGrid" SnapsToDevicePixels="True">
													<Border x:Name="OuterBorder"
															BorderBrush="{TemplateBinding BorderBrush}"
															BorderThickness="{TemplateBinding BorderThickness}"
															Background="{TemplateBinding Background}" />
													<StackPanel x:Name="StackPanel"
															HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
															VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
														<Image x:Name="PART_Image"
																RenderOptions.BitmapScalingMode="NearestNeighbor"
																HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
																Height="32"
																Margin="{DynamicResource {ComponentResourceKey ResourceId=LargeImageMargin, TypeInTargetAssembly={x:Type Ribbon:Ribbon}}}"
																Source="{TemplateBinding LargeImageSource}"
																VerticalAlignment="Center" Width="32" />
														<Grid x:Name="Grid" HorizontalAlignment="Center"
																VerticalAlignment="Center">
															<Ribbon:RibbonTwoLineText x:Name="TwoLineText"
																	Ribbon:RibbonTwoLineText.HasTwoLines="{TemplateBinding Ribbon:RibbonTwoLineText.HasTwoLines}"
																	HorizontalAlignment="Center"
																	LineStackingStrategy="BlockLineHeight"
																	LineHeight="13" Margin="1,1,1,0"
																	PathFill="{TemplateBinding Foreground}"
																	Ribbon:RibbonTwoLineText.PathData="{TemplateBinding Ribbon:RibbonTwoLineText.PathData}"
																	TextAlignment="Center"
																	Text="{TemplateBinding Label}"
																	VerticalAlignment="Top" />
														</Grid>
													</StackPanel>
												</Grid>
												<ControlTemplate.Triggers>
													<DataTrigger
															Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}"
															Value="Large">
														<Setter Property="MinWidth" Value="42" />
														<Setter Property="Height" Value="69" />
														<Setter Property="MinHeight" TargetName="Grid" Value="26" />
														<Setter Property="Ribbon:RibbonTwoLineText.HasTwoLines"
																TargetName="TwoLineText" Value="True" />
													</DataTrigger>
													<DataTrigger
															Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}"
															Value="Small">
														<Setter Property="Height" Value="22" />
														<Setter Property="Margin" TargetName="PART_Image" Value="1,0" />
														<Setter Property="Source" TargetName="PART_Image"
																Value="{Binding SmallImageSource, RelativeSource={RelativeSource TemplatedParent}}" />
														<Setter Property="Width" TargetName="PART_Image" Value="16" />
														<Setter Property="Height" TargetName="PART_Image" Value="16" />
														<Setter Property="HorizontalAlignment" TargetName="TwoLineText"
																Value="Left" />
														<Setter Property="Margin" TargetName="TwoLineText" Value="1" />
														<Setter Property="Orientation" TargetName="StackPanel"
																Value="Horizontal" />
													</DataTrigger>
													<MultiDataTrigger>
														<MultiDataTrigger.Conditions>
															<Condition
																	Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}"
																	Value="Small" />
															<Condition
																	Binding="{Binding IsInQuickAccessToolBar, RelativeSource={RelativeSource Self}}"
																	Value="True" />
														</MultiDataTrigger.Conditions>
														<Setter Property="Height" Value="Auto" />
													</MultiDataTrigger>
													<DataTrigger
															Binding="{Binding ControlSizeDefinition.IsLabelVisible, RelativeSource={RelativeSource Self}}"
															Value="False">
														<Setter Property="Text" TargetName="TwoLineText"
																Value="{x:Null}" />
														<Setter Property="Margin" TargetName="TwoLineText"
																Value="-2,0,2,0" />
													</DataTrigger>
													<DataTrigger
															Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}"
															Value="Collapsed">
														<Setter Property="Visibility" TargetName="PART_Image"
																Value="Collapsed" />
													</DataTrigger>
													<Trigger Property="IsMouseOver" Value="True">
														<Setter Property="Background" TargetName="OuterBorder"
																Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}" />
														<Setter Property="BorderBrush" TargetName="OuterBorder"
																Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
													</Trigger>
													<Trigger Property="IsKeyboardFocused" Value="True">
														<Setter Property="Background" TargetName="OuterBorder"
																Value="{Binding FocusedBackground, RelativeSource={RelativeSource TemplatedParent}}" />
														<Setter Property="BorderBrush" TargetName="OuterBorder"
																Value="{Binding FocusedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
													</Trigger>
													<Trigger Property="IsEnabled" Value="False">
														<Setter Property="Opacity" TargetName="PART_Image" Value="0.5" />
														<Setter Property="TextElement.Foreground" TargetName="MainGrid"
																Value="#FF9E9E9E" />
														<Setter Property="PathFill" TargetName="TwoLineText"
																Value="#FF9E9E9E" />
													</Trigger>
													<Trigger Property="IsChecked" Value="True">
														<Setter Property="Background" TargetName="OuterBorder"
																Value="{Binding CheckedBackground, RelativeSource={RelativeSource TemplatedParent}}" />
														<Setter Property="BorderBrush" TargetName="OuterBorder"
																Value="{Binding CheckedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
													</Trigger>
													<Trigger Property="IsPressed" Value="True">
														<Setter Property="Background" TargetName="OuterBorder"
																Value="{Binding PressedBackground, RelativeSource={RelativeSource TemplatedParent}}" />
														<Setter Property="BorderBrush" TargetName="OuterBorder"
																Value="{Binding PressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
													</Trigger>
													<Trigger Property="IsInControlGroup" Value="True">
														<Setter Property="BorderBrush" TargetName="OuterBorder"
																Value="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
														<Setter Property="BorderThickness" TargetName="OuterBorder"
																Value="0,0,1,0" />
													</Trigger>
													<DataTrigger Binding="{Binding HighContrast}" Value="True">
														<Setter Property="TextElement.Foreground" TargetName="MainGrid"
																Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
														<Setter Property="PathFill" TargetName="TwoLineText"
																Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
														<Setter Property="Background" TargetName="OuterBorder"
																Value="Transparent" />
														<Setter Property="BorderBrush" TargetName="OuterBorder"
																Value="Transparent" />
													</DataTrigger>
													<MultiDataTrigger>
														<MultiDataTrigger.Conditions>
															<Condition
																	Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}"
																	Value="True" />
															<Condition Binding="{Binding HighContrast}" Value="True" />
														</MultiDataTrigger.Conditions>
														<Setter Property="Background" TargetName="OuterBorder"
																Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
														<Setter Property="BorderBrush" TargetName="OuterBorder"
																Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
														<Setter Property="TextElement.Foreground" TargetName="MainGrid"
																Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
														<Setter Property="PathFill" TargetName="TwoLineText"
																Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
													</MultiDataTrigger>
													<MultiDataTrigger>
														<MultiDataTrigger.Conditions>
															<Condition
																	Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}"
																	Value="True" />
															<Condition Binding="{Binding HighContrast}" Value="True" />
														</MultiDataTrigger.Conditions>
														<Setter Property="BorderBrush" TargetName="OuterBorder"
																Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
														<Setter Property="TextElement.Foreground" TargetName="MainGrid"
																Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
														<Setter Property="PathFill" TargetName="TwoLineText"
																Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
													</MultiDataTrigger>
													<MultiDataTrigger>
														<MultiDataTrigger.Conditions>
															<Condition
																	Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}"
																	Value="True" />
															<Condition
																	Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
																	Value="False" />
															<Condition Binding="{Binding HighContrast}" Value="True" />
														</MultiDataTrigger.Conditions>
														<Setter Property="BorderBrush" TargetName="OuterBorder"
																Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
													</MultiDataTrigger>
													<MultiDataTrigger>
														<MultiDataTrigger.Conditions>
															<Condition
																	Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}"
																	Value="True" />
															<Condition
																	Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}"
																	Value="True" />
															<Condition Binding="{Binding HighContrast}" Value="True" />
														</MultiDataTrigger.Conditions>
														<Setter Property="BorderBrush" TargetName="OuterBorder"
																Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
													</MultiDataTrigger>
													<MultiDataTrigger>
														<MultiDataTrigger.Conditions>
															<Condition
																	Binding="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}}"
																	Value="True" />
															<Condition
																	Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}"
																	Value="False" />
															<Condition Binding="{Binding HighContrast}" Value="True" />
														</MultiDataTrigger.Conditions>
														<Setter Property="BorderBrush" TargetName="OuterBorder"
																Value="Transparent" />
														<Setter Property="Background" TargetName="OuterBorder"
																Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
														<Setter Property="TextElement.Foreground" TargetName="MainGrid"
																Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
														<Setter Property="PathFill" TargetName="TwoLineText"
																Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
													</MultiDataTrigger>
													<MultiDataTrigger>
														<MultiDataTrigger.Conditions>
															<Condition
																	Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
																	Value="True" />
															<Condition Binding="{Binding HighContrast}" Value="True" />
														</MultiDataTrigger.Conditions>
														<Setter Property="Background" TargetName="OuterBorder"
																Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
														<Setter Property="BorderBrush" TargetName="OuterBorder"
																Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
														<Setter Property="TextElement.Foreground" TargetName="MainGrid"
																Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
														<Setter Property="PathFill" TargetName="TwoLineText"
																Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
													</MultiDataTrigger>
													<MultiDataTrigger>
														<MultiDataTrigger.Conditions>
															<Condition
																	Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource Self}}"
																	Value="True" />
															<Condition Binding="{Binding HighContrast}" Value="True" />
														</MultiDataTrigger.Conditions>
														<Setter Property="Background" TargetName="OuterBorder"
																Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
														<Setter Property="BorderBrush" TargetName="OuterBorder"
																Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
														<Setter Property="TextElement.Foreground" TargetName="MainGrid"
																Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
														<Setter Property="PathFill" TargetName="TwoLineText"
																Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
													</MultiDataTrigger>
													<MultiDataTrigger>
														<MultiDataTrigger.Conditions>
															<Condition
																	Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
																	Value="True" />
															<Condition
																	Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}"
																	Value="True" />
															<Condition Binding="{Binding HighContrast}" Value="True" />
														</MultiDataTrigger.Conditions>
														<Setter Property="BorderBrush" TargetName="OuterBorder"
																Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
													</MultiDataTrigger>
													<MultiDataTrigger>
														<MultiDataTrigger.Conditions>
															<Condition
																	Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource Self}}"
																	Value="True" />
															<Condition
																	Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}"
																	Value="True" />
															<Condition Binding="{Binding HighContrast}" Value="True" />
														</MultiDataTrigger.Conditions>
														<Setter Property="BorderBrush" TargetName="OuterBorder"
																Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
													</MultiDataTrigger>
													<MultiDataTrigger>
														<MultiDataTrigger.Conditions>
															<Condition
																	Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
																	Value="True" />
															<Condition Binding="{Binding HighContrast}" Value="True" />
														</MultiDataTrigger.Conditions>
														<Setter Property="Background" TargetName="OuterBorder"
																Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
														<Setter Property="BorderBrush" TargetName="OuterBorder"
																Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
														<Setter Property="TextElement.Foreground" TargetName="MainGrid"
																Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
														<Setter Property="PathFill" TargetName="TwoLineText"
																Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
													</MultiDataTrigger>
													<MultiDataTrigger>
														<MultiDataTrigger.Conditions>
															<Condition
																	Binding="{Binding IsInControlGroup, RelativeSource={RelativeSource Self}}"
																	Value="True" />
															<Condition Binding="{Binding HighContrast}" Value="True" />
														</MultiDataTrigger.Conditions>
														<Setter Property="BorderBrush" TargetName="OuterBorder"
																Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
													</MultiDataTrigger>
													<MultiDataTrigger>
														<MultiDataTrigger.Conditions>
															<Condition
																	Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
																	Value="False" />
															<Condition Binding="{Binding HighContrast}" Value="True" />
														</MultiDataTrigger.Conditions>
														<Setter Property="TextElement.Foreground" TargetName="MainGrid"
																Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
														<Setter Property="PathFill" TargetName="TwoLineText"
																Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
													</MultiDataTrigger>
												</ControlTemplate.Triggers>
											</ControlTemplate>
										</Ribbon:RibbonToggleButton.Template>
									</Ribbon:RibbonToggleButton>
								</Grid>
							</StackPanel>
						</Border>
						<Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False"
								IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
								Placement="Bottom" PopupAnimation="Fade" HorizontalOffset="-5" VerticalOffset="-5">
							<Popup.CacheMode>
								<BitmapCache />
							</Popup.CacheMode>
							<Popup.Style>
								<Style TargetType="Popup">
									<Style.Triggers>
										<Trigger Property="IsOpen" Value="True">
											<Trigger.EnterActions>
												<BeginStoryboard>
													<Storyboard>
														<DoubleAnimation Storyboard.TargetProperty="VerticalOffset"
																From="-30" Duration="0:0:0.4">
															<DoubleAnimation.EasingFunction>
																<QuarticEase />
															</DoubleAnimation.EasingFunction>
														</DoubleAnimation>
													</Storyboard>
												</BeginStoryboard>
											</Trigger.EnterActions>
										</Trigger>
									</Style.Triggers>
								</Style>
							</Popup.Style>
							<Border>
								<Border.CacheMode>
									<BitmapCache />
								</Border.CacheMode>
								<Border.Effect>
									<DropShadowEffect Color="#FFBBBBBB" ShadowDepth="0" RenderingBias="Performance"
											Opacity="0.5" />
								</Border.Effect>
								<Border x:Name="MenuBorder" Margin="5"
										BorderBrush="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
										BorderThickness="{TemplateBinding BorderThickness}"
										Background="{DynamicResource White}">
									<ScrollViewer x:Name="PART_SubMenuScrollViewer" Margin="1"
											Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
										<ItemsPresenter x:Name="ItemsPresenter"
												KeyboardNavigation.DirectionalNavigation="Cycle"
												Grid.IsSharedSizeScope="True" KeyboardNavigation.TabNavigation="Cycle" />
									</ScrollViewer>
								</Border>
							</Border>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsDropDownOpen" Value="True">
							<Setter Property="ToolTipService.IsEnabled" TargetName="PART_HeaderButton" Value="False" />
							<Setter Property="ToolTipService.IsEnabled" TargetName="PART_ToggleButton" Value="False" />
						</Trigger>
						<Trigger Property="HasGallery" Value="True">
							<Setter Property="HorizontalScrollBarVisibility" TargetName="PART_SubMenuScrollViewer"
									Value="Disabled" />
							<Setter Property="VerticalScrollBarVisibility" TargetName="PART_SubMenuScrollViewer"
									Value="Disabled" />
						</Trigger>
						<DataTrigger
								Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}"
								Value="Large">
							<Setter Property="MinWidth" Value="42" />
							<Setter Property="Height" TargetName="PART_HeaderButton" Value="37" />
							<Setter Property="Height" TargetName="PART_ToggleButton" Value="32" />
							<Setter Property="Ribbon:RibbonTwoLineText.HasTwoLines" TargetName="PART_ToggleButton"
									Value="True" />
							<Setter Property="Orientation" TargetName="StackPanel" Value="Vertical" />
						</DataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
										Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}"
										Value="Large" />
								<Condition
										Binding="{Binding ControlSizeDefinition.IsLabelVisible, RelativeSource={RelativeSource Self}}"
										Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter Property="ControlSizeDefinition" TargetName="PART_ToggleButton">
								<Setter.Value>
									<Ribbon:RibbonControlSizeDefinition IsLabelVisible="True" ImageSize="Collapsed" />
								</Setter.Value>
							</Setter>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
										Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}"
										Value="Small" />
								<Condition
										Binding="{Binding ControlSizeDefinition.IsLabelVisible, RelativeSource={RelativeSource Self}}"
										Value="False" />
							</MultiDataTrigger.Conditions>
							<Setter Property="ControlSizeDefinition" TargetName="PART_HeaderButton">
								<Setter.Value>
									<Ribbon:RibbonControlSizeDefinition IsLabelVisible="False" ImageSize="Small" />
								</Setter.Value>
							</Setter>
							<Setter Property="Width" TargetName="PART_ToggleButton" Value="11" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
										Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}"
										Value="Small" />
								<Condition
										Binding="{Binding ControlSizeDefinition.IsLabelVisible, RelativeSource={RelativeSource Self}}"
										Value="True" />
								<Condition Binding="{Binding LabelPosition, RelativeSource={RelativeSource Self}}"
										Value="DropDown" />
							</MultiDataTrigger.Conditions>
							<Setter Property="ControlSizeDefinition" TargetName="PART_HeaderButton">
								<Setter.Value>
									<Ribbon:RibbonControlSizeDefinition IsLabelVisible="False" ImageSize="Small" />
								</Setter.Value>
							</Setter>
							<Setter Property="ControlSizeDefinition" TargetName="PART_ToggleButton">
								<Setter.Value>
									<Ribbon:RibbonControlSizeDefinition IsLabelVisible="True" ImageSize="Collapsed" />
								</Setter.Value>
							</Setter>
							<Setter Property="Width" TargetName="PART_ToggleButton" Value="11" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
										Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}"
										Value="Small" />
								<Condition
										Binding="{Binding ControlSizeDefinition.IsLabelVisible, RelativeSource={RelativeSource Self}}"
										Value="True" />
								<Condition Binding="{Binding LabelPosition, RelativeSource={RelativeSource Self}}"
										Value="Header" />
							</MultiDataTrigger.Conditions>
							<Setter Property="ControlSizeDefinition" TargetName="PART_HeaderButton">
								<Setter.Value>
									<Ribbon:RibbonControlSizeDefinition IsLabelVisible="True" ImageSize="Small" />
								</Setter.Value>
							</Setter>
							<Setter Property="Width" TargetName="PART_ToggleButton" Value="11" />
						</MultiDataTrigger>
						<DataTrigger Binding="{Binding IsInQuickAccessToolBar, RelativeSource={RelativeSource Self}}"
								Value="True">
							<Setter Property="Height" TargetName="PART_HeaderButton" Value="Auto" />
							<Setter Property="Height" TargetName="PART_ToggleButton" Value="Auto" />
						</DataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
										Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}"
										Value="Collapsed" />
								<Condition
										Binding="{Binding ControlSizeDefinition.IsLabelVisible, RelativeSource={RelativeSource Self}}"
										Value="False" />
							</MultiDataTrigger.Conditions>
							<Setter Property="ControlSizeDefinition" TargetName="PART_HeaderButton">
								<Setter.Value>
									<Ribbon:RibbonControlSizeDefinition IsLabelVisible="False" ImageSize="Collapsed" />
								</Setter.Value>
							</Setter>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
										Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}"
										Value="Collapsed" />
								<Condition
										Binding="{Binding ControlSizeDefinition.IsLabelVisible, RelativeSource={RelativeSource Self}}"
										Value="True" />
								<Condition Binding="{Binding LabelPosition, RelativeSource={RelativeSource Self}}"
										Value="DropDown" />
							</MultiDataTrigger.Conditions>
							<Setter Property="ControlSizeDefinition" TargetName="PART_HeaderButton">
								<Setter.Value>
									<Ribbon:RibbonControlSizeDefinition IsLabelVisible="False" ImageSize="Collapsed" />
								</Setter.Value>
							</Setter>
							<Setter Property="ControlSizeDefinition" TargetName="PART_ToggleButton">
								<Setter.Value>
									<Ribbon:RibbonControlSizeDefinition IsLabelVisible="True" ImageSize="Collapsed" />
								</Setter.Value>
							</Setter>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
										Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}"
										Value="Collapsed" />
								<Condition
										Binding="{Binding ControlSizeDefinition.IsLabelVisible, RelativeSource={RelativeSource Self}}"
										Value="True" />
								<Condition Binding="{Binding LabelPosition, RelativeSource={RelativeSource Self}}"
										Value="Header" />
							</MultiDataTrigger.Conditions>
							<Setter Property="ControlSizeDefinition" TargetName="PART_HeaderButton">
								<Setter.Value>
									<Ribbon:RibbonControlSizeDefinition IsLabelVisible="True" ImageSize="Collapsed" />
								</Setter.Value>
							</Setter>
						</MultiDataTrigger>
						<Trigger Property="IsMouseOver" SourceName="PART_HeaderButton" Value="True">
							<Setter Property="BorderBrush" TargetName="PART_ToggleButton"
									Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" SourceName="PART_ToggleButton" Value="True" />
								<Condition Property="IsEnabled" SourceName="PART_HeaderButton" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" TargetName="PART_HeaderButton"
									Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
						</MultiTrigger>
						<Trigger Property="IsKeyboardFocused" SourceName="PART_ToggleButton" Value="True">
							<Setter Property="Background" TargetName="OuterBorder"
									Value="{Binding FocusedBackground, RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter Property="BorderBrush" TargetName="PART_HeaderButton"
									Value="{Binding FocusedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Background" TargetName="OuterBorder"
									Value="{Binding CheckedBackground, RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter Property="BorderBrush" TargetName="PART_ToggleButton"
									Value="{Binding CheckedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<Trigger Property="IsChecked" SourceName="PART_ToggleButton" Value="True">
							<Setter Property="Background" TargetName="OuterBorder"
									Value="{Binding CheckedBackground, RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter Property="BorderBrush" TargetName="PART_HeaderButton"
									Value="{Binding CheckedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<Trigger Property="IsInControlGroup" Value="True">
							<Setter Property="BorderBrush" TargetName="OuterBorder"
									Value="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter Property="BorderThickness" TargetName="OuterBorder" Value="0,0,1,0" />
						</Trigger>
						<Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
							<Setter Property="CanAddToQuickAccessToolBarDirectly" TargetName="PART_HeaderButton"
									Value="False" />
						</Trigger>
						<Trigger Property="IsOpen" SourceName="PART_Popup" Value="False">
							<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" SourceName="PART_HeaderButton" Value="False" />
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" TargetName="PART_HeaderButton"
									Value="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter Property="Visibility" TargetName="UnderlayBorder" Value="Visible" />
							<Setter Property="BorderBrush" TargetName="PART_ToggleButton"
									Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="TextElement.Foreground" TargetName="MainGrid" Value="#FF9E9E9E" />
						</Trigger>
						<DataTrigger Binding="{Binding HighContrast}" Value="True">
							<Setter Property="TextElement.Foreground" TargetName="MainGrid"
									Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
							<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None" />
							<Setter Property="BorderBrush" TargetName="MenuBorder"
									Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
							<Setter Property="Background" TargetName="MenuBorder"
									Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
							<Setter Property="Background" TargetName="OuterBorder" Value="Transparent" />
							<Setter Property="Opacity" TargetName="UnderlayBorder" Value="0" />
						</DataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
										Value="True" />
								<Condition Binding="{Binding IsEnabled, ElementName=PART_HeaderButton}" Value="True" />
								<Condition Binding="{Binding HighContrast}" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="OuterBorder"
									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
										Value="True" />
								<Condition Binding="{Binding IsEnabled, ElementName=PART_HeaderButton}" Value="False" />
								<Condition Binding="{Binding HighContrast}" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Opacity" TargetName="UnderlayBorder" Value="1" />
							<Setter Property="Background" TargetName="UnderlayBorder"
									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsKeyboardFocused, ElementName=PART_ToggleButton}"
										Value="True" />
								<Condition Binding="{Binding HighContrast}" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="OuterBorder"
									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
							<Setter Property="BorderBrush" TargetName="PART_HeaderButton"
									Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}"
										Value="True" />
								<Condition Binding="{Binding HighContrast}" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="OuterBorder"
									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
							<Setter Property="BorderBrush" TargetName="PART_ToggleButton"
									Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
										Value="True" />
								<Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}"
										Value="True" />
								<Condition Binding="{Binding HighContrast}" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter Property="BorderBrush" TargetName="PART_ToggleButton"
									Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsKeyboardFocused, ElementName=PART_ToggleButton}"
										Value="True" />
								<Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}"
										Value="True" />
								<Condition Binding="{Binding HighContrast}" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter Property="BorderBrush" TargetName="PART_HeaderButton"
									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
							<Setter Property="BorderBrush" TargetName="PART_ToggleButton"
									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
						</MultiDataTrigger>
						<Trigger Property="IsInQuickAccessToolBar" Value="True">
							<Setter Property="CanAddToQuickAccessToolBarDirectly" TargetName="PART_HeaderButton"
									Value="False" />
							<Setter Property="Width" TargetName="PART_HeaderButton" Value="22" />
							<Setter Property="Width" TargetName="PART_ToggleButton" Value="11" />
							<Setter Property="Width" Value="33" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
										Value="False" />
								<Condition Binding="{Binding HighContrast}" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter Property="TextElement.Foreground" TargetName="MainGrid"
									Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>