<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:Ribbon="clr-namespace:Microsoft.Windows.Controls.Ribbon;assembly=RibbonControlsLibrary">
	<Style TargetType="Ribbon:RibbonComboBox">
		<!--<Setter Property="ContextMenu">
			<Setter.Value>
				<ContextMenu Height="0" Width="0" />
			</Setter.Value>
		</Setter>-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Ribbon:RibbonComboBox}">
					<Border x:Name="MainBorder">
						<Grid Margin="1,0" SnapsToDevicePixels="True">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition x:Name="OuterTextColumn" Width="Auto" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>
							<Image x:Name="Image" RenderOptions.BitmapScalingMode="NearestNeighbor" Grid.Column="1"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Height="32"
									Margin="1" Grid.Row="0" Source="{TemplateBinding LargeImageSource}"
									VerticalAlignment="Center" Width="32" />
							<Grid x:Name="Grid" Grid.Column="1" HorizontalAlignment="Center" Margin="1" Grid.Row="1"
									VerticalAlignment="Top">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition x:Name="TextColumn" Width="Auto" />
								</Grid.ColumnDefinitions>
								<Grid x:Name="TwoLineTextPanel" HorizontalAlignment="Center" VerticalAlignment="Center">
									<Ribbon:RibbonTwoLineText x:Name="TwoLineText"
											LineStackingStrategy="BlockLineHeight" LineHeight="13" Margin="2,0"
											TextAlignment="Center" Text="{TemplateBinding Label}" />
									<Rectangle x:Name="FocusVisual" Margin="1" Stroke="Black" StrokeThickness="1"
											StrokeDashArray="1 2" Visibility="Collapsed" />
								</Grid>
								<Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="{TemplateBinding BorderThickness}"
										Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Grid.Column="1"
										Height="23" />
								<Grid Grid.Column="1" Height="23" Grid.IsSharedSizeScope="True">
									<Grid.ColumnDefinitions>
										<ColumnDefinition />
										<ColumnDefinition SharedSizeGroup="ToggleButtonGroup" Width="Auto" />
									</Grid.ColumnDefinitions>
									<Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											IsHitTestVisible="False" Margin="{TemplateBinding Padding}"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
											VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											Width="{TemplateBinding SelectionBoxWidth}">
										<ContentPresenter x:Name="PART_ContentHost"
												ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
												Content="{TemplateBinding SelectionBoxItem}"
												ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
												Margin="2,0" />
									</Grid>
									<TextBox Name="PART_EditableTextBox" Width="{TemplateBinding SelectionBoxWidth}"
											Margin="{TemplateBinding Padding}"
											IsReadOnly="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent}}">
										<TextBox.Style>
											<Style TargetType="{x:Type TextBox}">
												<Setter Property="OverridesDefaultStyle" Value="True" />
												<Setter Property="AllowDrop" Value="True" />
												<Setter Property="MinWidth" Value="0" />
												<Setter Property="MinHeight" Value="0" />
												<Setter Property="FocusVisualStyle" Value="{x:Null}" />
												<Setter Property="Template">
													<Setter.Value>
														<ControlTemplate TargetType="{x:Type TextBox}">
															<ScrollViewer x:Name="PART_ContentHost"
																	VerticalAlignment="Center"
																	HorizontalScrollBarVisibility="Hidden"
																	VerticalScrollBarVisibility="Hidden"
																	Background="Transparent" />
														</ControlTemplate>
													</Setter.Value>
												</Setter>
											</Style>
										</TextBox.Style>
									</TextBox>
									<Ribbon:RibbonToggleButton x:Name="PART_ToggleButton" BorderBrush="Transparent"
											BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent"
											CheckedBackground="{TemplateBinding PressedBackground}" Grid.ColumnSpan="2"
											CheckedBorderBrush="{TemplateBinding PressedBorderBrush}"
											IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
											PressedBorderBrush="{TemplateBinding PressedBorderBrush}"
											PressedBackground="{TemplateBinding PressedBackground}">
										<Ribbon:RibbonToggleButton.Style>
											<Style TargetType="{x:Type Ribbon:RibbonToggleButton}">
												<Setter Property="MouseOverBorderBrush"
														Value="{Binding Ribbon.MouseOverBorderBrush, RelativeSource={RelativeSource Self}}" />
												<Setter Property="MouseOverBackground"
														Value="{Binding Ribbon.MouseOverBackground, RelativeSource={RelativeSource Self}}" />
												<Setter Property="PressedBorderBrush"
														Value="{Binding Ribbon.PressedBorderBrush, RelativeSource={RelativeSource Self}}" />
												<Setter Property="PressedBackground"
														Value="{Binding Ribbon.PressedBackground, RelativeSource={RelativeSource Self}}" />
												<Setter Property="CheckedBorderBrush"
														Value="{Binding Ribbon.CheckedBorderBrush, RelativeSource={RelativeSource Self}}" />
												<Setter Property="CheckedBackground"
														Value="{Binding Ribbon.CheckedBackground, RelativeSource={RelativeSource Self}}" />
												<Setter Property="FocusedBorderBrush"
														Value="{Binding Ribbon.FocusedBorderBrush, RelativeSource={RelativeSource Self}}" />
												<Setter Property="FocusedBackground"
														Value="{Binding Ribbon.FocusedBackground, RelativeSource={RelativeSource Self}}" />
												<Setter Property="ClickMode" Value="Release" />
												<Setter Property="BorderThickness" Value="1" />
												<Setter Property="Template">
													<Setter.Value>
														<ControlTemplate TargetType="{x:Type Ribbon:RibbonToggleButton}">
															<Grid Background="Transparent">
																<Grid.ColumnDefinitions>
																	<ColumnDefinition Width="*" />
																	<ColumnDefinition
																			SharedSizeGroup="ToggleButtonGroup"
																			Width="Auto" />
																</Grid.ColumnDefinitions>
																<Border x:Name="OuterBorder"
																		BorderBrush="{TemplateBinding BorderBrush}"
																		BorderThickness="{TemplateBinding BorderThickness}"
																		Background="{TemplateBinding Background}"
																		Grid.Column="1" SnapsToDevicePixels="True"
																		Width="14">
																	<Path x:Name="Arrow" Data="M0,0L2.5,3 5,0z"
																			Fill="{TemplateBinding Foreground}"
																			HorizontalAlignment="Center"
																			VerticalAlignment="Center" />
																</Border>
															</Grid>
															<ControlTemplate.Triggers>
																<Trigger Property="IsMouseOver" Value="True">
																	<Setter Property="Background"
																			TargetName="OuterBorder"
																			Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}" />
																	<Setter Property="BorderBrush"
																			TargetName="OuterBorder"
																			Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
																</Trigger>
																<Trigger Property="IsKeyboardFocused" Value="True">
																	<Setter Property="Background"
																			TargetName="OuterBorder"
																			Value="{Binding FocusedBackground, RelativeSource={RelativeSource TemplatedParent}}" />
																	<Setter Property="BorderBrush"
																			TargetName="OuterBorder"
																			Value="{Binding FocusedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
																</Trigger>
																<Trigger Property="IsChecked" Value="True">
																	<Setter Property="Background"
																			TargetName="OuterBorder"
																			Value="{Binding CheckedBackground, RelativeSource={RelativeSource TemplatedParent}}" />
																	<Setter Property="BorderBrush"
																			TargetName="OuterBorder"
																			Value="{Binding CheckedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
																</Trigger>
																<Trigger Property="IsPressed" Value="True">
																	<Setter Property="Background"
																			TargetName="OuterBorder"
																			Value="{Binding PressedBackground, RelativeSource={RelativeSource TemplatedParent}}" />
																	<Setter Property="BorderBrush"
																			TargetName="OuterBorder"
																			Value="{Binding PressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
																</Trigger>
																<MultiDataTrigger>
																	<MultiDataTrigger.Conditions>
																		<Condition
																				Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}"
																				Value="True" />
																		<Condition Binding="{Binding HighContrast}"
																				Value="True" />
																	</MultiDataTrigger.Conditions>
																	<Setter Property="Background"
																			TargetName="OuterBorder"
																			Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
																	<Setter Property="BorderBrush"
																			TargetName="OuterBorder"
																			Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
																	<Setter Property="Fill" TargetName="Arrow"
																			Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
																</MultiDataTrigger>
																<MultiDataTrigger>
																	<MultiDataTrigger.Conditions>
																		<Condition
																				Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
																				Value="True" />
																		<Condition Binding="{Binding HighContrast}"
																				Value="True" />
																	</MultiDataTrigger.Conditions>
																	<Setter Property="Background"
																			TargetName="OuterBorder"
																			Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
																	<Setter Property="BorderBrush"
																			TargetName="OuterBorder"
																			Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
																	<Setter Property="Fill" TargetName="Arrow"
																			Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
																</MultiDataTrigger>
																<MultiDataTrigger>
																	<MultiDataTrigger.Conditions>
																		<Condition
																				Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
																				Value="True" />
																		<Condition Binding="{Binding HighContrast}"
																				Value="True" />
																	</MultiDataTrigger.Conditions>
																	<Setter Property="Background"
																			TargetName="OuterBorder"
																			Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
																	<Setter Property="BorderBrush"
																			TargetName="OuterBorder"
																			Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
																	<Setter Property="Fill" TargetName="Arrow"
																			Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
																</MultiDataTrigger>
																<MultiDataTrigger>
																	<MultiDataTrigger.Conditions>
																		<Condition
																				Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource Self}}"
																				Value="True" />
																		<Condition Binding="{Binding HighContrast}"
																				Value="True" />
																	</MultiDataTrigger.Conditions>
																	<Setter Property="Background"
																			TargetName="OuterBorder"
																			Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
																	<Setter Property="BorderBrush"
																			TargetName="OuterBorder"
																			Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
																	<Setter Property="Fill" TargetName="Arrow"
																			Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
																</MultiDataTrigger>
																<MultiDataTrigger>
																	<MultiDataTrigger.Conditions>
																		<Condition
																				Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
																				Value="True" />
																		<Condition
																				Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}"
																				Value="True" />
																		<Condition Binding="{Binding HighContrast}"
																				Value="True" />
																	</MultiDataTrigger.Conditions>
																	<Setter Property="BorderBrush"
																			TargetName="OuterBorder"
																			Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
																</MultiDataTrigger>
															</ControlTemplate.Triggers>
														</ControlTemplate>
													</Setter.Value>
												</Setter>
											</Style>
										</Ribbon:RibbonToggleButton.Style>
									</Ribbon:RibbonToggleButton>
								</Grid>
							</Grid>
							<Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False"
									PlacementTarget="{Binding ElementName=Border}"
									IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
									PopupAnimation="Fade" Placement="Bottom" HorizontalOffset="-5" VerticalOffset="-6">
								<Popup.Style>
									<Style TargetType="Popup">
										<Setter Property="CacheMode">
											<Setter.Value>
												<BitmapCache />
											</Setter.Value>
										</Setter>
										<Style.Triggers>
											<Trigger Property="IsOpen" Value="True">
												<Trigger.EnterActions>
													<BeginStoryboard>
														<Storyboard>
															<DoubleAnimation Storyboard.TargetProperty="VerticalOffset"
																	From="-30" Duration="0:0:0.4">
																<DoubleAnimation.EasingFunction>
																	<QuarticEase />
																</DoubleAnimation.EasingFunction>
															</DoubleAnimation>
														</Storyboard>
													</BeginStoryboard>
												</Trigger.EnterActions>
											</Trigger>
										</Style.Triggers>
									</Style>
								</Popup.Style>
								<Border x:Name="OuterBorder">
									<Border.CacheMode>
										<BitmapCache />
									</Border.CacheMode>
									<Border.Effect>
										<DropShadowEffect Color="#FFBBBBBB" ShadowDepth="0" RenderingBias="Performance"
												Opacity="0.5" />
									</Border.Effect>
									<Border x:Name="InnerBorder" BorderBrush="#FFC6C6C6" BorderThickness="1"
											Background="{DynamicResource White}" Margin="5">
										<Grid>
											<Grid.RowDefinitions>
												<RowDefinition Height="Auto" />
												<RowDefinition />
												<RowDefinition Height="Auto" />
											</Grid.RowDefinitions>
											<ItemsPresenter x:Name="ItemsPresenter"
													KeyboardNavigation.DirectionalNavigation="Cycle"
													Grid.IsSharedSizeScope="True" Margin="1" Grid.Row="1"
													SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
													KeyboardNavigation.TabNavigation="Cycle" />
											<Border x:Name="ResizeControl"
													BorderBrush="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
													BorderThickness="0,1,0,0" Background="#FFE5EFF9" Grid.Row="2"
													Visibility="Collapsed">
												<Thumb x:Name="PART_ResizeThumb">
													<Thumb.Style>
														<Style TargetType="{x:Type Thumb}">
															<Setter Property="Width" Value="11" />
															<Setter Property="Height" Value="11" />
															<Setter Property="VerticalAlignment" Value="Bottom" />
															<Setter Property="HorizontalAlignment" Value="Right" />
															<Setter Property="Cursor" Value="SizeNWSE" />
															<Setter Property="Template">
																<Setter.Value>
																	<ControlTemplate TargetType="{x:Type Thumb}">
																		<Border Background="Transparent">
																			<Path
																					Data="M9,0L11,0 11,11 0,11 0,9 3,9 3,6 6,6 6,3 9,3z"
																					Margin="0,0,2,2">
																				<Path.Fill>
																					<DrawingBrush TileMode="Tile"
																							Viewbox="0,0,3,3"
																							Viewport="0,0,3,3"
																							ViewportUnits="Absolute"
																							ViewboxUnits="Absolute">
																						<DrawingBrush.Drawing>
																							<DrawingGroup>
																								<GeometryDrawing
																										Brush="#FF6C747D"
																										Geometry="M0,0L2,0 2,2 0,2z" />
																							</DrawingGroup>
																						</DrawingBrush.Drawing>
																					</DrawingBrush>
																				</Path.Fill>
																			</Path>
																		</Border>
																	</ControlTemplate>
																</Setter.Value>
															</Setter>
															<Style.Triggers>
																<Trigger Property="FlowDirection" Value="RightToLeft">
																	<Setter Property="Cursor" Value="SizeNESW" />
																</Trigger>
															</Style.Triggers>
														</Style>
													</Thumb.Style>
												</Thumb>
											</Border>
										</Grid>
									</Border>
								</Border>
							</Popup>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<DataTrigger
								Binding="{Binding ControlSizeDefinition.Width.IsStar, RelativeSource={RelativeSource Self}}"
								Value="True">
							<Setter Property="Width" TargetName="TextColumn" Value="*" />
							<Setter Property="Width" TargetName="OuterTextColumn" Value="*" />
							<Setter Property="Width" TargetName="PART_ContentHost" Value="Auto" />
							<Setter Property="HorizontalAlignment" TargetName="PART_ContentHost" Value="Stretch" />
							<Setter Property="HorizontalAlignment" TargetName="Grid" Value="Stretch" />
						</DataTrigger>
						<DataTrigger
								Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}"
								Value="Large">
							<Setter Property="MinWidth" Value="44" />
							<Setter Property="Height" Value="66" />
							<Setter Property="Height" TargetName="Image" Value="32" />
							<Setter Property="Width" TargetName="Image" Value="32" />
							<Setter Property="MinHeight" TargetName="Grid" Value="26" />
							<Setter Property="Ribbon:RibbonTwoLineText.HasTwoLines" TargetName="TwoLineText"
									Value="True" />
						</DataTrigger>
						<DataTrigger
								Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}"
								Value="Small">
							<Setter Property="Height" Value="25" />
							<Setter Property="Source" TargetName="Image"
									Value="{Binding SmallImageSource, RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter Property="Height" TargetName="Image" Value="16" />
							<Setter Property="Width" TargetName="Image" Value="16" />
							<Setter Property="HorizontalAlignment" TargetName="Image" Value="Left" />
							<Setter Property="Margin" TargetName="Image" Value="2,0,1,0" />
							<Setter Property="Margin" TargetName="TwoLineText" Value="2,0,1,0" />
							<Setter Property="Ribbon:RibbonTwoLineText.HasTwoLines" TargetName="TwoLineText"
									Value="False" />
							<Setter Property="Grid.Column" TargetName="Image" Value="0" />
							<Setter Property="Grid.Row" TargetName="Image" Value="1" />
						</DataTrigger>
						<DataTrigger
								Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}"
								Value="Collapsed">
							<Setter Property="Visibility" TargetName="Image" Value="Collapsed" />
						</DataTrigger>
						<DataTrigger
								Binding="{Binding ControlSizeDefinition.IsLabelVisible, RelativeSource={RelativeSource Self}}"
								Value="False">
							<Setter Property="Visibility" TargetName="TwoLineTextPanel" Value="Collapsed" />
						</DataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding HighContrast}" Value="False" />
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
										Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter Property="BorderBrush" TargetName="Border"
									Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter Property="Background" TargetName="Border"
									Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter Property="BorderBrush" TargetName="PART_ToggleButton"
									Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter Property="Background" TargetName="PART_ToggleButton">
								<Setter.Value>
									<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
										<GradientStop Color="#FFE4F0FE" Offset="0" />
										<GradientStop Color="#FFE4F0FE" Offset="0.49" />
										<GradientStop Color="#FFCFDFF3" Offset="0.5" />
										<GradientStop Color="#FFE8F1FD" Offset="1" />
									</LinearGradientBrush>
								</Setter.Value>
							</Setter>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding HighContrast}" Value="False" />
								<Condition Binding="{Binding IsKeyboardFocused, ElementName=PART_ToggleButton}"
										Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="Border"
									Value="{Binding FocusedBackground, RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter Property="BorderBrush" TargetName="Border"
									Value="{Binding FocusedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
						</MultiDataTrigger>
						<Trigger Property="ShowKeyboardCues" Value="True">
							<Setter Property="Visibility" TargetName="FocusVisual" Value="Visible" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" TargetName="Image" Value="0.5" />
							<Setter Property="Background" TargetName="Border" Value="#90DEDEDE" />
							<Setter Property="BorderBrush" TargetName="Border" Value="#90B1BBC6" />
							<Setter Property="TextElement.Foreground" TargetName="MainBorder" Value="#FF9E9E9E" />
						</Trigger>
						<Trigger Property="IsInControlGroup" Value="True">
							<Setter Property="BorderBrush" TargetName="MainBorder"
									Value="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter Property="BorderThickness" TargetName="MainBorder" Value="0,0,1,0" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="CanUserResizeHorizontally" Value="True" />
								<Condition Property="CanUserResizeVertically" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Visibility" TargetName="ResizeControl" Value="Visible" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="CanUserResizeHorizontally" Value="False" />
								<Condition Property="CanUserResizeVertically" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Visibility" TargetName="ResizeControl" Value="Visible" />
							<Setter Property="Style" TargetName="PART_ResizeThumb">
								<Setter.Value>
									<Style TargetType="{x:Type Thumb}">
										<Setter Property="Height" Value="11" />
										<Setter Property="Cursor" Value="SizeNS" />
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Thumb}">
													<Border Background="Transparent">
														<Path HorizontalAlignment="Center" Margin="0,0,2,2"
																VerticalAlignment="Bottom">
															<Path.Data>
																<RectangleGeometry Rect="0,0,11,3" />
															</Path.Data>
															<Path.Fill>
																<DrawingBrush TileMode="Tile" Viewbox="0,0,3,3"
																		Viewport="0,0,3,3" ViewportUnits="Absolute"
																		ViewboxUnits="Absolute">
																	<DrawingBrush.Drawing>
																		<DrawingGroup>
																			<GeometryDrawing Brush="#FF6C747D"
																					Geometry="M0,0L2,0 2,2 0,2z" />
																		</DrawingGroup>
																	</DrawingBrush.Drawing>
																</DrawingBrush>
															</Path.Fill>
														</Path>
													</Border>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
								</Setter.Value>
							</Setter>
						</MultiTrigger>
						<Trigger Property="IsDropDownPositionedAbove" Value="True">
							<Setter Property="Grid.Row" TargetName="ResizeControl" Value="0" />
							<Setter Property="BorderThickness" TargetName="ResizeControl" Value="0,0,0,1" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsDropDownPositionedAbove" Value="True" />
								<Condition Property="CanUserResizeHorizontally" Value="True" />
								<Condition Property="CanUserResizeVertically" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Style" TargetName="PART_ResizeThumb">
								<Setter.Value>
									<Style TargetType="{x:Type Thumb}">
										<Setter Property="Width" Value="11" />
										<Setter Property="Height" Value="11" />
										<Setter Property="VerticalAlignment" Value="Top" />
										<Setter Property="HorizontalAlignment" Value="Right" />
										<Setter Property="Cursor" Value="SizeNESW" />
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Thumb}">
													<Border Background="Transparent">
														<Path Data="M0,0L0,3 3,3 3,6 6,6 6,9 9,9 9,11 11,11 11,0z"
																Margin="0,2,2,0">
															<Path.Fill>
																<DrawingBrush TileMode="Tile" Viewbox="0,0,3,3"
																		Viewport="0,0,3,3" ViewportUnits="Absolute"
																		ViewboxUnits="Absolute">
																	<DrawingBrush.Drawing>
																		<DrawingGroup>
																			<GeometryDrawing Brush="#FF6C747D"
																					Geometry="M0,0L2,0 2,2 0,2z" />
																		</DrawingGroup>
																	</DrawingBrush.Drawing>
																</DrawingBrush>
															</Path.Fill>
														</Path>
													</Border>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
										<Style.Triggers>
											<Trigger Property="FlowDirection" Value="RightToLeft">
												<Setter Property="Cursor" Value="SizeNWSE" />
											</Trigger>
										</Style.Triggers>
									</Style>
								</Setter.Value>
							</Setter>
						</MultiTrigger>
						<DataTrigger Binding="{Binding HighContrast}" Value="True">
							<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None" />
							<Setter Property="BorderBrush" TargetName="ResizeControl"
									Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
							<Setter Property="Background" TargetName="ResizeControl"
									Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
							<Setter Property="Background"
									Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
							<Setter Property="Background" TargetName="Border" Value="Transparent" />
							<Setter Property="BorderBrush" TargetName="Border"
									Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
							<Setter Property="Stroke" TargetName="FocusVisual"
									Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
							<Setter Property="TextElement.Foreground" TargetName="MainBorder"
									Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
						</DataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsInControlGroup, RelativeSource={RelativeSource Self}}"
										Value="True" />
								<Condition Binding="{Binding HighContrast}" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter Property="BorderBrush" TargetName="MainBorder"
									Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
										Value="False" />
								<Condition Binding="{Binding HighContrast}" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter Property="TextElement.Foreground" TargetName="MainBorder"
									Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>